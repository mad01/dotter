# Default configuration for dotter
# For more information, see [project-link-here]

dotfiles_repo_path = "~/.dotfiles" # Path to your dotfiles repository

# Example: Manage .bashrc
# [dotfiles.bashrc]
# source = ".bashrc" # Relative to dotfiles_repo_path
# target = "~/.bashrc"

# Example: Manage nvim configuration
# [dotfiles.nvim_config]
# source = "nvim/init.vim" # Relative to dotfiles_repo_path
# target = "~/.config/nvim/init.vim"

# Example: Manage a tool like fzf
# [[tools]]
# name = "fzf"
# check_command = "command -v fzf"
# install_hint = "Install fzf from https://github.com/junegunn/fzf"
# config_files = [
#   { source = "fzf/.fzfrc", target = "~/.fzfrc" },
# ]

# Example: Template variables
# Variables defined here are available in templates with {{ .varname }}
# [template_variables]
# git_name = "Your Name"
# git_email = "your.email@example.com"
# editor = "vim"
# ps1_color = "green"
# enable_history_expansion = true
# custom_paths = ["~/bin", "~/.local/bin", "~/go/bin"]

# Example: Shell aliases
# [shell.aliases]
# ll = "ls -alh"
# k = "kubectl"

# Example: Shell functions
# [shell.functions.mygogreet]
# body = '''
# echo "Hello from a Go-managed shell function!"
# echo "Arguments: $@"
# '''

# Example: Hooks for extending dotter functionality
# [hooks]
# # Hooks to run before any dotfiles are processed
# pre_apply = [
#   "echo 'Starting dotfile application process'",
#   "~/dotfiles/scripts/backup-dotfiles.sh",
# ]
# 
# # Hooks to run after all dotfiles are processed
# post_apply = [
#   "echo 'All dotfiles have been processed'",
#   "~/dotfiles/scripts/notify-completion.sh",
# ]
# 
# # Hooks to run before specific dotfiles are linked
# [hooks.pre_link]
# # Before linking nvim_config
# nvim_config = [
#   "mkdir -p ~/.config/nvim",
# ]
# 
# # Hooks to run after specific dotfiles are linked
# [hooks.post_link]
# # After linking bashrc
# bashrc = [
#   "source ~/.bashrc",
# ] 